#!/bin/bash

set -e

# Cloudflare Warp
# =============================================================================

# create a tun device
if [ ! -e /dev/net/tun ]; then
  mkdir -p /dev/net
  mknod /dev/net/tun c 10 200
  chmod 600 /dev/net/tun
fi

# start the dbus-daemon using sudo
sudo mkdir -p /run/dbus
if [ -f /run/dbus/pid ]; then
    sudo rm /run/dbus/pid
fi
sudo dbus-daemon --config-file=/usr/share/dbus-1/system.conf

# manually accept the tos
mkdir -p ~/.local/share/warp
printf 'yes' > ~/.local/share/warp/accepted-tos.txt
printf 'yes' > ~/.local/share/warp/accepted-teams-tos.txt

# start the daemon and wait for the daemon to start, default 5 seconds
if [ -n "${DEBUG}" ]; then
  sudo warp-svc --accept-tos &
else
  # NB: sed command > https://superuser.com/questions/380772/removing-ansi-color-codes-from-text-stream
  sudo warp-svc --accept-tos | sed -e 's/\x1b\[[0-9;]*m//g' | grep -v DEBUG | grep -v NewNeighbour &
fi
sleep "${WARP_START_DELAY}"

# create a user for the cfwarp-cli to run with
useradd --uid 59000 --no-create-home --shell /bin/bash cfwarp
alias warp-cli="su cfwarp warp-cli"

warp-cli --version

# if /var/lib/cloudflare-warp/reg.json not exists, register the warp client
if [ ! -f /var/lib/cloudflare-warp/reg.json ]; then
    printf "Registering new Warp client: " && warp-cli registration new

    # set warp mode
    printf "Setting Warp DNS families mode off: " && warp-cli dns families off
fi

# Show the warp registration detail
warp-cli registration show

# connect to the warp server
printf "Connecting Warp client: " && warp-cli connect

# Wait reasonably for warp to become connected
sleep "${WARP_START_DELAY}"

# Check that cloudflare-warp has updated /etc/resolv.conf
if [ "$(grep -c 'generated by cloudflare-warp' /etc/resolv.conf)" -lt 1 ]; then
  echo "ERROR: cloudflare-warp has not modified /etc/resolv.conf; check if container-run provides NET_ADMIN capabilities!"
  exit 1
else
  echo "OKAY: cloudflare-warp has modified /etc/resolv.conf"
fi

_cfwarp_connected=false
for i in $(seq 1 "${WARP_CONNECT_RETRY_MAX}"); do
  if /scripts/warp-healthcheck.sh; then
    _cfwarp_connected=true
    break
  else
    printf 'Waiting for warp connection...\n'
    sleep "${WARP_CONNECT_RETRY_SLEEP}"
  fi
done

# Exit if we did not get a _cfwarp_connected=true
if [[ ${_cfwarp_connected} != true ]]; then
  printf "\nERROR: unable to obtain Warp connection!\n"
  exit 1
fi
